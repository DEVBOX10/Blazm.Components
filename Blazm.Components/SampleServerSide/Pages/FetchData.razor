@page "/fetchdata"
@page "/sub/fetchdata"
@using Blazm.Components
@using SampleServerSide.Data
@inject WeatherForecastService ForecastService

<style>
    th,td {
        white-space: nowrap;
    }
</style>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<input type="text" @bind="filter" />
<h2>BlazmGrid</h2>

<BlazmGrid UseVirtualize="false" Filter="@filter" Data="forecasts" PageSize="10" Sortable="true" SortField="@nameof(WeatherForecast.Date)" ShowFooter="true">
    <GridColumns>
        <GridColumn CanFilter="true" Field="@nameof(WeatherForecast.Date)" Format="{0:d}" Priority="3" />
        <GridColumn CanFilter="true" Field="@nameof(WeatherForecast.TemperatureC)" HighlightSign="true" Priority="1" Class="alignRight">
            <FooterTemplate>
                @{
                    var temp = context as List<WeatherForecast>;
                }
                @temp.Sum(t => t.TemperatureC)
            </FooterTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WeatherForecast.TemperatureF)" Priority="2" Class="alignRight">
            <FooterTemplate>
                @{
                    var temp = context as List<WeatherForecast>;
                }
                @temp.Sum(t => t.TemperatureF)
            </FooterTemplate>
        </GridColumn>
        <GridColumn CanFilter="true" Field="@nameof(WeatherForecast.Summary)" Priority="0" />
    </GridColumns>
</BlazmGrid>


@code { 
    string filter ="";
    private WeatherForecast[] forecasts;
    private BlazmGrid<WeatherForecast> GroupedGrid;
    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
}
