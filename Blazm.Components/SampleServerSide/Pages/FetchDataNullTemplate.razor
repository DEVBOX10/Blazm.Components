@page "/fetchdatanulltemplate"
@using Blazm.Components
@using SampleServerSide.Data
@inject WeatherForecastService ForecastService

<style>
    th {
        white-space: nowrap;
    }
</style>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>


    <h2>BlazmGrid</h2>
    <BlazmGrid Data="forecasts" PageSize="10" Sortable="true" SortField="@nameof(WeatherForecast.Date)" ShowFooter="true">
        <NullGridTemplate>
            <span>Is null</span>
        </NullGridTemplate>
        <GridColumns>
            <GridColumn Field="@nameof(WeatherForecast.Date)" Format="{0:d}" Priority="3" />
            <GridColumn Field="@nameof(WeatherForecast.TemperatureC)" HighlightSign="true" Priority="1" Class="alignRight">
                <FooterTemplate>
                    @{
                        var temp = context as List<WeatherForecast>;
                    }
                    @temp.Sum(t => t.TemperatureC)
                </FooterTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(WeatherForecast.TemperatureF)" Priority="2" Class="alignRight">
                <FooterTemplate>
                    @{
                        var temp = context as List<WeatherForecast>;
                    }
                    @temp.Sum(t => t.TemperatureF)
                </FooterTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(WeatherForecast.Summary)" Priority="0" />
        </GridColumns>
    </BlazmGrid>

    <h2>BlazmGrid grouped</h2>
    <BlazmGrid @ref="GroupedGrid" GroupBy="d=>d.Summary" Data="forecasts" PageSize="10" Sortable="true" SortField="@nameof(WeatherForecast.Date)" ShowFooter="true" ShowGroupFooter="true">
        <NullGridTemplate>
            <span>Is null</span>
        </NullGridTemplate>
        <GroupHeader>
            <h5>@context</h5>
        </GroupHeader>
        <GridColumns>
            <GridColumn Field="@nameof(WeatherForecast.Date)" Format="{0:d}" Priority="3" />
            <GridColumn Field="@nameof(WeatherForecast.TemperatureC)" HighlightSign="true" Priority="1" Class="alignRight">
                <FooterTemplate>
                    @{
                            var temp = context as List<WeatherForecast>;
                    }
                    @temp.Sum(t => t.TemperatureC)
                </FooterTemplate>

                <GroupFooterTemplate>
                    @{ //Context contains all the WeatherForecast within the group
                        var temp = context as List<WeatherForecast>;
                    }
                    @temp.Sum(t => t.TemperatureC)
                </GroupFooterTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(WeatherForecast.TemperatureF)" Priority="2" Class="alignRight">
                <FooterTemplate>
                    @{
                            var temp = context as List<WeatherForecast>;
                    }
                    @temp.Sum(t => t.TemperatureF)
                </FooterTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(WeatherForecast.Summary)" Priority="0" />
        </GridColumns>
    </BlazmGrid>

    @*<h2>Template</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>*@


@code {
    private WeatherForecast[] forecasts;
    private BlazmGrid<WeatherForecast> GroupedGrid;
    protected override async Task OnInitializedAsync()
    {
        forecasts = null; //await ForecastService.GetForecastAsync(DateTime.Now);
    }
}
