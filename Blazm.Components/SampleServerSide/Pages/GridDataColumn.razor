@page "/griddatacolumn"
@using Blazm.Components
@using SampleServerSide.Data
@inject WeatherForecastService ForecastService

<style>
    th {
        white-space: nowrap;
    }
</style>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>BlazmGrid - Data Column</h2>
    <BlazmGrid Data="forecasts" PageSize="10" Sortable="true" SortField="@nameof(WeatherForecast.Date)" ShowFooter="true">
        <GridColumns>
            <GridColumn Field="@nameof(WeatherForecast.Date)" Format="{0:d}" Priority="3" />
            <GridColumn Field="@nameof(WeatherForecast.TemperatureC)" HighlightSign="true" Priority="1" Class="alignRight">
                <FooterTemplate>
                    @{
                        var temp = context as List<WeatherForecast>;
                    }
                    @temp.Sum(t => t.TemperatureC)
                </FooterTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(WeatherForecast.TemperatureF)" Priority="2" Class="alignRight">
                <FooterTemplate>
                    @{
                        var temp = context as List<WeatherForecast>;
                    }
                    @temp.Sum(t => t.TemperatureF)
                </FooterTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(WeatherForecast.Summary)" Priority="0" />
            <GridColumn>
                <Template>
                    @{
                        var item = context as WeatherForecast;
                    }
                    <button class="btn btn-danger" @onclick="@(async () => { await Delete(item); })"><i class="far fa-trash-alt"></i></button>
                </Template>
            </GridColumn>
        </GridColumns>

    </BlazmGrid>
}

@code {
    private List<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    protected async Task Delete(WeatherForecast item)
    {
        forecasts.Remove(item);
    }

    protected async Task Load(DateTime? date = null)
    {
        forecasts = (await ForecastService.GetForecastAsync(date ?? DateTime.Now)).ToList();
    }
}
