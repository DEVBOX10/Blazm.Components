@namespace Blazm.Components
@implements IGridColumn

<th class="@Class @HeaderClass">
    <span @onclick="@SortColumn" class="@(CanSort ? "cursor-pointer" : "")">
        @if (TitleTemplate != null)
        {
            @TitleTemplate
        }
        else
        {
            @Title
        }
    </span>
    @if (CanSort)
    {
        <span class="fa @(GetSortStyle(this.Field)) @(CanSort ? "cursor-pointer" : "")" @onclick="@SortColumn"></span>
    }

    @if (CanFilter)
    {
        <span class="fa @(GetFilterStyle(this.Field)) @(CanFilter ? "cursor-pointer" : "")" @onclick="@(async () => { ContainerGrid.ShowFilter = !ContainerGrid.ShowFilter; await ContainerGrid.ApplyFilter(); })"></span>
    }
</th>

@code {

    public List<Filter> Filters { get; set; } = new List<Filter> { new Filter()};

    [CascadingParameter]
    private IGridContainer ContainerGrid { get; set; }


    [Parameter]
    public string Width
    {
        get;
        set;
    }

    [Parameter]
    public bool CanFilter { get; set; } = false;

    [Parameter]
    public int Priority
    {
        get;
        set;
    } = 0;

    private string _Headerclass = "";
    [Parameter]
    public string HeaderClass
    {
        get { return _Headerclass; }
        set { _Headerclass = value; }
    }

    private string _class = "";
    [Parameter]
    public string Class
    {
        get { return _class + " " + (Visible ? "" : "hiddencell"); ; }
        set { _class = value; }
    }

    [Parameter]
    public bool HighlightSign
    {
        get;
        set;
    } = false;

    private void SortColumn()
    {
        if (CanSort)
        {
            ContainerGrid?.Sort(this);
        }
    }

    public async Task ApplyFilter()
    {
        if (CanFilter)
        {
            if (ContainerGrid != null)
            {
                await ContainerGrid.ApplyFilter();
            }
        }
    }

    [Parameter]
    public string? Id { get; set; } = null;

    public bool Visible
    {
        get;
        set;
    } = true;


    [Parameter]
    public int ClientWidth
    {
        get;
        set;
    }

    [Parameter]
    public string Field
    {
        get;
        set;
    }
    [Parameter]
    public string Format
    {
        get;
        set;
    }
    [Parameter]
    public Type Type
    {
        get;
        set;
    }

    private string valueNegativeClass = "";

    [Parameter]
    public string ValueNegativeClass
    {
        get
        {
            if (HighlightSign && string.IsNullOrEmpty(valueNegativeClass))
            {
                return "negative";
            }
            return valueNegativeClass;
        }
        set { valueNegativeClass = value; }
    }

    private string valuePositiveClass = "";
    [Parameter]
    public string ValuePositiveClass
    {
        get
        {
            if (HighlightSign && string.IsNullOrEmpty(valuePositiveClass))
            {
                return "positive";
            }
            return valuePositiveClass;
        }
        set { valuePositiveClass = value; }
    }

    [Parameter]
    public string DataClass
    {
        get;
        set;
    } = "";

    private string title = null;
    [Parameter]
    public string Title
    {
        get
        {
            if (Type != null && Field != null)
            {
                var displayattribute = TypeDescriptor.GetReflectionType(this.Type).GetProperty(Field)?.GetCustomAttribute<DisplayAttribute>();
                if (title == null && displayattribute != null)
                {
                    this.title = displayattribute.Name;
                }
            }
            return this.title ?? this.Field;
        }
        set
        {
            this.title = value;
        }
    }

    [Parameter]
    public RenderFragment<object> Template { get; set; }

    [Parameter]
    public RenderFragment? TitleTemplate { get; set; }


    [Parameter]
    public RenderFragment<object> FooterTemplate { get; set; }

    [Parameter]
    public bool Exportable { get; set; } = true;

    [Parameter]
    public RenderFragment<object> GroupFooterTemplate { get; set; }



    protected override void OnInitialized()
    {
        this.ContainerGrid.AddColumn(this);
        base.OnInitialized();
    }

    public bool CanSort
    {
        get { return Field != null; }
    }
    public bool ShowAdvancedFilter
    {
        get; set;
    } = false;

    private string GetSortStyle(string columnName)
    {
        if (this.ContainerGrid.SortField != columnName)
        {
            return string.Empty;
        }
        if (this.ContainerGrid.SortDirection == System.ComponentModel.ListSortDirection.Ascending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private string GetFilterStyle(string columnName)
    {
        if (CanFilter)
        {
            return "fa-filter";
        }

        return string.Empty;
    }
}
