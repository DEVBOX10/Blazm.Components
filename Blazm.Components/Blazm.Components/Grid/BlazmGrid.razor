@namespace Blazm.Components
@typeparam TItem
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel
@using System.IO
@using System.Dynamic
@using Blazm.Components.Dynamic
@using Microsoft.JSInterop
<CascadingValue Value="@this">
    <div id="@("tablecontainer" + id)">
        <table class="table-striped table @(ShowAllColumns?"countableClientWidth":"")" id="@("table" + id)">
            @{
                TItem firstRow = default!;
                if (Data != null && Data.Count() > 0)
                {
                    firstRow = Data.First();
                    if (AutoGenerateColumns && Data != null && Data.Any())
                    {
                        //Check if type is expandoObject

                        if (firstRow is System.Dynamic.ExpandoObject)
                        {
                            TypeDescriptor.AddProvider(new ExpandoObjectTypeDescriptionProvider(), typeof(ExpandoObject));
                        }
                    }
                }
            }

            @if (GroupBy == null)
            {
                <thead>
                    <GridHeader FirstRow="firstRow" />
                </thead>
                <tbody>
                    @*@if (HasData)
                {*@
                    @if (UseVirtualize)
                    {
                        <Virtualize @ref="Virtualize" TItem="TItem" Context="row" ItemsProvider="ItemsProvider">
                            <GridDataRow Row="row" />
                        </Virtualize>
                    }
                    else
                    {
                        foreach (var row in loadPagedData())
                        {
                            <GridDataRow Row="row" />
                        }
                    }
                    @*}*@
                </tbody>
            }
            else
            {
                if (Data != null && Data.GroupBy(GroupBy) != null)
                {

                    if (GroupSortField != null)
                    {
                        if (GroupSortDirection == ListSortDirection.Ascending)
                        {
                            Data = Data.OrderBy(x => x.GetType().GetProperty(GroupSortField).GetValue(x, null));
                        }
                        else
                        {
                            Data = Data.OrderByDescending(x => x.GetType().GetProperty(GroupSortField).GetValue(x, null));
                        }
                        
                        
                    }

                    var groupedData = Data.GroupBy(GroupBy);
                    foreach (var d in groupedData)
                    {
                        <tbody>
                            @if (GroupHeader != null)
                            {
                                <tr class="headerrow">
                                    <td colspan="@VisibleColumns"> @GroupHeader(d.Key)</td>
                                </tr>
                            }
                            <GridHeader FirstRow="firstRow" />
                            @{
                                var groupData = d.ToList();
                                if (SortField != null)
                                {
                                    if (SortDirection == ListSortDirection.Descending)
                                    {
                                        groupData = groupData.OrderByDescending(x => x.GetType().GetProperty(SortField).GetValue(x, null)).ToList();
                                    }
                                    else
                                    {
                                        groupData = groupData.OrderBy(x => x.GetType().GetProperty(SortField).GetValue(x, null)).ToList();
                                    }
                                }
                            }


                            @foreach (var row in ApplyFilter(groupData))
                            {
                                <GridDataRow Row="row" />
                            }
                        </tbody>
                        @if (ShowGroupFooter)
                        {
                            <tr class="footerrow">
                                @if (ShowCheckbox)
                                {
                                    <td></td>
                                }
                                @if (Columns.Any(c => !c.Visible) || DetailTemplate != null)
                                {
                                    <td></td>
                                }
                                @foreach (var column in Columns.Where(c => c.Visible))
                                {
                                    <td class="@column.Class">
                                        @if (column.GroupFooterTemplate != null)
                                        {
                                            @column.GroupFooterTemplate(d.ToList())
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    }
                }
            }

            @if (!HasData || Data == null)
            {
                <tr>
                    <td class="alignCenter" colspan="@VisibleColumns">
                        @if (Data == null)
                        {
                            @NullGridTemplate
                        }
                        else if (!HasData)
                        {
                            @EmptyGridTemplate
                        }

                    </td>
                </tr>
            }

            @if (ShowFooter && Data != null)
            {
                <tfoot>
                    <tr class="footerrow">
                        @if (ShowCheckbox)
                        {
                            <td></td>
                        }
                        @if (Columns.Any(c => !c.Visible) || DetailTemplate != null)
                        {
                            <td></td>
                        }
                        @foreach (var column in Columns.Where(c => c.Visible))
                        {
                            <td class="@column.Class">
                                @if (column.FooterTemplate != null)
                                {
                                    @column.FooterTemplate(Data.ToList())
                                }
                            </td>
                        }
                    </tr>
                </tfoot>
            }
        </table>
        @if (PageSize != 0 && !IsFiltered && (((Data?.Count()) ?? 0) > PageSize) && GroupBy == null)
        {
            <ul class="pagination">
                <li class="page-item @(CurrentPage==0?"disabled":"cursor-pointer")"><a class="page-link" @onclick="PreviousPage">@PreviousText</a></li>
                @if (ShowPageCounter)
                {
                    var totalPageCount = Data.Count() / PageSize;
                    if (Data.Count() % PageSize != 0)
                    {
                        totalPageCount++;
                    }
                    <li class="page-item page-count">@(CurrentPage + 1) / @totalPageCount</li>
                }
                <li class="page-item  @((((CurrentPage * PageSize)+PageSize) < Data.Count())?"cursor-pointer":"disabled")"><a class="page-link" @onclick="NextPage">@NextText</a></li>
            </ul>

        }
    </div>
</CascadingValue>
@code
{
    [Parameter]
    public RenderFragment CollapsedTemplate
    {
        get;
        set;
    } =@<i class="collapsed"></i>;


    [Parameter]
    public RenderFragment ExpandedTemplate
    {
        get;
        set;
    } = @<i class="expanded"></i>;

    }
