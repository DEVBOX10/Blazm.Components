@namespace Blazm.Components
@typeparam TItem

@implements IGridContainer
@implements IDisposable
@inject ResizeListener listener
@inject IJSRuntime jsruntime

<div id="@("tablecontainer" + id)">
    <table class="table table-striped" id="@("table" + id)">

        @if (GroupBy == null)
        {
            <thead>
                <tr>
                    @if (ShowCheckbox || Columns.Any(c => !c.Visible))
                    {
                        <th>
                            @if (ShowCheckbox)
                            {
                                <input type="checkbox" @onchange="async eventArgs => { await selectItemsAsync(Data.ToList(), eventArgs.Value); }" />
                            }
                        </th>
                    }
                    <CascadingValue Value="@this">
                        @GridColumns
                    </CascadingValue>
                </tr>
            </thead>
            <tbody>
                @if (Data != null)
                {
                    var pagedData = Data;

                    if (SortField != null)
                    {
                        if (SortDirection == ListSortDirection.Descending)
                        {
                            pagedData = pagedData.OrderByDescending(x => x.GetType().GetProperty(SortField).GetValue(x, null)).ToList();
                        }
                        else
                        {
                            pagedData = pagedData.OrderBy(x => x.GetType().GetProperty(SortField).GetValue(x, null)).ToList();
                        }
                    }

                    if (PageSize != 0)
                    {
                        pagedData = pagedData.Skip(PageSize * CurrentPage).Take(PageSize);
                    }

                    @foreach (var row in pagedData)
                    {
                        <tr class="@(Columns.Any(c => !c.Visible) ? "expandable" : "")" @onclick="@(() => { if (ExpandedRows.Contains(row.GetHashCode())) { ExpandedRows.Remove(row.GetHashCode()); } else { ExpandedRows.Add(row.GetHashCode()); } })">
                            @if (Columns.Any(c => !c.Visible) || ShowCheckbox)
                            {
                                <td>
                                @if (Columns.Any(c => !c.Visible))
                                {
                            
                                    if(ExpandedRows.Contains(row.GetHashCode()))
                                    {
                                        @ExpandedTemplate
                                    }
                                    else
                                    {
                                        @CollapsedTemplate
                                    }
                                }
                                @if (ShowCheckbox)
                                {
                                    <input type="checkbox" checked="@(isItemSelected(row))" @onchange="async eventArgs => { await selectItemAsync(row, eventArgs.Value); }" />
                                }
                                </td>
                            }
                            @foreach (var column in Columns)
                            {
                                if (column.Template == null)
                                {
                                    string stringValue = "";

                                    if (column.Format == null)
                                    {
                                        stringValue = row.GetType().GetProperty(column.Field).GetValue(row)?.ToString();
                                    }
                                    else
                                    {
                                        stringValue = string.Format(column.Format, row.GetType().GetProperty(column.Field)?.GetValue(row));
                                    }
                                    <td class="@column.Class @getSignClass(column,stringValue) @column.DataClass ">@stringValue</td>
                                }
                                else
                                {
                                    <td class="@column.Class @column.DataClass">@column.Template(row)</td>
                                }
                            }
                        </tr>
                        <HiddenRows Columns="@Columns" ExpandedRows="@ExpandedRows" ShowCheckbox="@ShowCheckbox" Row="@row"></HiddenRows>
                    }
                }
            </tbody>
        }
        else
        {
            if (Data != null && Data.GroupBy(GroupBy) != null)
            {
                if (GroupSortField != null)
                {
                    Data = Data.OrderByDescending(x => x.GetType().GetProperty(GroupSortField).GetValue(x, null)).ToList();
                }
                var groupedData = Data.GroupBy(GroupBy);
                foreach (var d in groupedData)
                {
                    <tbody>
                        @if (GroupHeader != null)
                        {
                            <tr class="headerrow"><td colspan="@(Columns.Where(c => c.Visible).Count() + (ShowCheckbox?1:0) + (Columns.Any(c => c.Visible==false)?1:0))"> @GroupHeader(d.Key)</td></tr>
                        }
                    <tr>
                        @if (ShowCheckbox || Columns.Any(c => !c.Visible))
                        {
                            <th>
                                @if (ShowCheckbox)
                                {
                                    <input type="checkbox" @onchange="async eventArgs => { await selectItemsAsync(d.ToList(), eventArgs.Value); }" /> 
                                }
                            </th>
                        }
                        <CascadingValue Value="@this">
                            @GridColumns
                        </CascadingValue>
                    </tr>
                        @{
                            var groupData = d.ToList();
                            if (SortField != null)
                            {
                                if (SortDirection == ListSortDirection.Descending)
                                {
                                    groupData = groupData.OrderByDescending(x => x.GetType().GetProperty(SortField).GetValue(x, null)).ToList();
                                }
                                else
                                {
                                    groupData = groupData.OrderBy(x => x.GetType().GetProperty(SortField).GetValue(x, null)).ToList();
                                }
                            }
                        }


                        @foreach (var row in groupData)
                        {
                    <tr class="@(Columns.Any(c => !c.Visible) ? "expandable" : "")" @onclick="@(() => { if (ExpandedRows.Contains(row.GetHashCode())) { ExpandedRows.Remove(row.GetHashCode()); } else { ExpandedRows.Add(row.GetHashCode()); } })">
                        @if (Columns.Any(c => !c.Visible) || ShowCheckbox)
                        {
                            <td>
                                @if (Columns.Any(c => !c.Visible))
                                {

                                    if (ExpandedRows.Contains(row.GetHashCode()))
                                    {
                                        @ExpandedTemplate
                                    }
                                    else
                                    {
                                        @CollapsedTemplate
                                    }
                                }
                                @if (ShowCheckbox)
                                {
                                    <input type="checkbox" checked="@(isItemSelected(row))" @onchange="async eventArgs => { await selectItemAsync(row, eventArgs.Value); }" />
                                }
                            </td>
                        }
                        @foreach (var column in Columns)
                        {
                            if (column.Template == null)
                            {
                                string stringValue = "";

                                if (column.Format == null)
                                {
                                    stringValue = row.GetType().GetProperty(column.Field).GetValue(row)?.ToString();
                                }
                                else
                                {
                                    stringValue = string.Format(column.Format, row.GetType().GetProperty(column.Field)?.GetValue(row));
                                }
                                <td class="@column.Class  @getSignClass(column,stringValue) @column.DataClass">@stringValue</td>
                            }
                            else
                            {
                                <td class="@column.Class @column.DataClass">@column.Template(row)</td>
                            }
                        }
                    </tr>
                            <HiddenRows Columns="@Columns" ExpandedRows="@ExpandedRows" ShowCheckbox="@ShowCheckbox" Row="@row"></HiddenRows>
                        }
                    </tbody>
                    @if (ShowGroupFooter)
                    {
                        <tr class="footerrow">
                            @if (ShowCheckbox)
                            {
                                <td></td>
                            }
                            @foreach (var column in Columns.Where(c => c.Visible))
                            {
                                <td class="@column.Class">
                                    @if (column.GroupFooterTemplate != null)
                                    {@column.GroupFooterTemplate(d.ToList())}
                                </td>
                            }
                        </tr>
                    }
                }
            }
        }
        @if (ShowFooter && Data != null)
        {
            <tfoot>
                <tr class="footerrow">
                    @if (ShowCheckbox)
                    {
                        <td></td>
                    }
                    @foreach (var column in Columns.Where(c => c.Visible))
                    {
                        <td class="@column.Class">
                            @if (column.FooterTemplate != null)
                            {@column.FooterTemplate(Data.ToList())}
                        </td>
                    }
                </tr>
            </tfoot>
        }
    </table>
    @if (PageSize != 0 && Data.Count() > PageSize && GroupBy==null)
    {

        <ul class="pagination">
            <li class="page-item @(CurrentPage==0?"disabled":"cursor-pointer")"><a class="page-link" @onclick="PreviousPage">@PreviousText</a></li>
            @if (ShowPageCounter)
            {
                var itemCount = Data.Count();
                var totalPageCount = itemCount / PageSize;
                if (itemCount % PageSize != 0)
                {
                    totalPageCount++;
                }
                <li class="page-item page-count">@(CurrentPage + 1) / @totalPageCount</li>
            }
            <li class="page-item  @((((CurrentPage * PageSize)+PageSize) < Data.Count())?"cursor-pointer":"disabled")"><a class="page-link" @onclick="NextPage">@NextText</a></li>
        </ul>

    }
</div>

@code
{
    [Parameter]
    public string NextText { get; set; } = "Next";

    [Parameter]
    public string PreviousText { get; set; } = "Previous";

    private async Task selectItemsAsync(List<TItem> items, object selected)
    {
        foreach (var item in items)
        {
            if ((bool)selected)
            {
                if (!SelectedData.Contains(item))
                {
                    SelectedData.Add(item);
                }
            }
            else
            {
                SelectedData.Remove(item);
            }
        }
        await SelectedDataChanged.InvokeAsync(SelectedData);
        StateHasChanged();
    }

    private async Task selectItemAsync(TItem item, object selected)
    {
        if ((bool)selected)
        {
            SelectedData.Add(item);
        }
        else
        {
            SelectedData.Remove(item);
        }
        await SelectedDataChanged.InvokeAsync(SelectedData);
        StateHasChanged();
    }

    private bool isItemSelected(TItem item)
    {
        return SelectedData.Contains(item);
    }

    [Parameter]
    public EventCallback<List<TItem>> SelectedDataChanged { get; set; }

    private string getSignClass(IGridColumn column, string value)
    {
        if (column.HighlightSign)
        {
            try
            {
                if (value.StartsWith("-"))
                {
                    return column.ValueNegativeClass;
                }
                else
                {
                    var d = Convert.ToDouble(value);
                    if (d == 0d)
                    {
                        return "";
                    }
                    else
                    {
                        return column.ValuePositiveClass;
                    }
                }
            }
            catch { }
        }
        return "";
    }

    string id = Guid.NewGuid().ToString();
    int ContainerClientWidth { get; set; }
    int TableClientWidth { get; set; }
    protected void SetPage(int pageNumber)
    {
        CurrentPage = pageNumber;
    }

    protected void PreviousPage()
    {
        if (CurrentPage > 0)
        {
            CurrentPage--;
        }
    }

    protected void NextPage()
    {
        if ((CurrentPage * PageSize) + PageSize < Data.Count())
        {
            CurrentPage++;
        }
    }
    [Parameter]
    public int PageSize
    {
        get;
        set;
    } = 0;

    [Parameter]
    public int CurrentPage
    {
        get;
        set;
    } = 0;

    [Parameter]
    public bool ShowCheckbox
    {
        get;
        set;
    } = false;

    [Parameter]
    public bool ShowGroupFooter
    {
        get;
        set;
    } = false;

    [Parameter]
    public bool ShowFooter
    {
        get;
        set;
    } = false;

    [Parameter]
    public bool Sortable
    {
        get;
        set;
    } = false;

    [Parameter]
    public string SortField
    {
        get;
        set;
    } = null;

    [Parameter]
    public bool ShowPageCounter
    {
        get;
        set;
    } = true;


    [Parameter]
    public string GroupSortField
    {
        get;
        set;
    } = null;

    [Parameter]
    public System.ComponentModel.ListSortDirection SortDirection
    {
        get; set;
    } = System.ComponentModel.ListSortDirection.Ascending;

    [Parameter]
    public RenderFragment GridColumns
    {
        get;
        set;
    }

    [Parameter]
    public RenderFragment CollapsedTemplate
    {
        get;
        set;
    } = @<i class="fas fa-greater-than"></i>;


[Parameter]
public RenderFragment ExpandedTemplate
{
get;
set;
} = @<i class="fas fa-greater-than fa-rotate-90"></i>;

    [Parameter]
    public RenderFragment<object> GroupHeader
    {
        get;
        set;
    }


    [Parameter]
    public Func<TItem, object> GroupBy { get; set; } = null;

    [Parameter]
    public IEnumerable<TItem> Data
    {
        get;
        set;
    }

    [Parameter]
    public List<TItem> SelectedData
    {
        get;
        set;
    } = new List<TItem>();

    private List<IGridColumn> Columns { get; set; } = new List<IGridColumn>();
    private List<IGridColumn> AllColumns { get; set; } = new List<IGridColumn>();
    private List<int> ExpandedRows = new List<int>();
    void IGridContainer.AddColumn(IGridColumn column)
    {

        column.Id = column.Field + column.Template?.GetHashCode() + column.Format?.GetHashCode() ;

        var col = Columns.FirstOrDefault(c => c.Id == column.Id);
        column.Type = typeof(TItem);
        if (col == null)
        {
            Columns.Add(column);
        }
        //If the grid is grouped we need access to all columns (one set per group)
        AllColumns.Add(column);

        StateHasChanged();
    }

    Task IGridContainer.Sort(IGridColumn column)
    {
        return InvokeAsync(() =>
        {
            if (Sortable)
            {
                if (SortField == column.Field && column.CanSort)
                {
                    if (SortDirection == ListSortDirection.Descending)
                    {
                        SortDirection = ListSortDirection.Ascending;
                    }
                    else
                    {
                        SortDirection = ListSortDirection.Descending;
                    }
                }
                else
                {
                    SortField = column.Field;
                }
                StateHasChanged();
            }
        });
    }

    void IGridContainer.RemoveColumn(IGridColumn column)
    {
        Columns.Remove(column);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            listener.OnResized += WindowResized;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

#pragma warning disable 1998
    private async Task resizeTableAsync()
    {
        int reduceby = 0;
        Columns.ForEach((c) => c.Visible = true);

        foreach (var c in Columns.Where(c => c.Priority > 0).OrderByDescending(c => c.Priority))
        {
            if (TableClientWidth - reduceby <= ContainerClientWidth)
            {
                break;
            }
            foreach (var col in AllColumns.Where(a => a.Id == c.Id))
            {
                //update all references (needed if grouped)
                col.Visible = false;
            }
            reduceby += c.ClientWidth;
        }

        StateHasChanged();
    }
#pragma warning restore 1998


    void IDisposable.Dispose()
    {
        listener.OnResized -= WindowResized;
    }

    async void WindowResized(object _, BrowserWindowSize window)
    {
        var size = await jsruntime.InvokeAsync<TableSize>("resizeTable", id, GroupBy != null);
        for (var i = 0; i < size?.Columns?.Length; i++)
        {
            var counter = i;
            if (ShowCheckbox || Columns.Any(c => !c.Visible))
            {
                //Skip the first one
                counter = i - 1;
                if (i == 0)
                {
                    continue;
                }
            }
            Columns[counter].ClientWidth = size.Columns[counter];
        }
        TableClientWidth = size.TableClientWidth;
        ContainerClientWidth = size.ContainerClientWidth;

        await resizeTableAsync();

        StateHasChanged();
    }

    class TableSize
    {
        public int[] Columns { get; set; }
        public int TableClientWidth { get; set; }
        public int ContainerClientWidth { get; set; }
    }

}
